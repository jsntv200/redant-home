# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  jobs(relativePath: String): Jobs!
  jobsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: JobsFilter): JobsConnection!
  portfolio(relativePath: String): Portfolio!
  portfolioConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PortfolioFilter): PortfolioConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  services(relativePath: String): Services!
  servicesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ServicesFilter): ServicesConnection!
  technology(relativePath: String): Technology!
  technologyConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: TechnologyFilter): TechnologyConnection!
}

input DocumentFilter {
  jobs: JobsFilter
  portfolio: PortfolioFilter
  post: PostFilter
  services: ServicesFilter
  technology: TechnologyFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Jobs | Portfolio | Post | Services | Technology | Folder

type Jobs implements Node & Document {
  published: Boolean!
  layout: String!
  slug: String!
  title: String!
  description: String!
  image_small: String
  image: String
  redirect_from: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input JobsFilter {
  published: BooleanFilter
  layout: StringFilter
  slug: StringFilter
  title: StringFilter
  description: StringFilter
  image_small: ImageFilter
  image: ImageFilter
  redirect_from: StringFilter
  body: RichTextFilter
}

type JobsConnectionEdges {
  cursor: String!
  node: Jobs
}

type JobsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [JobsConnectionEdges]
}

type Portfolio implements Node & Document {
  published: Boolean!
  layout: String!
  theme: String!
  slug: String
  title: String
  description: String
  project_url: String
  client: String
  project_date: String
  team_size: String
  lines_of_code: String
  technology_tags: [String]
  industry_vertical_tags: [String]
  service_tags: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PortfolioFilter {
  published: BooleanFilter
  layout: StringFilter
  theme: StringFilter
  slug: StringFilter
  title: StringFilter
  description: StringFilter
  project_url: StringFilter
  client: StringFilter
  project_date: StringFilter
  team_size: StringFilter
  lines_of_code: StringFilter
  technology_tags: StringFilter
  industry_vertical_tags: StringFilter
  service_tags: StringFilter
  body: RichTextFilter
}

type PortfolioConnectionEdges {
  cursor: String!
  node: Portfolio
}

type PortfolioConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PortfolioConnectionEdges]
}

type Post implements Node & Document {
  published: Boolean!
  layout: String!
  title: String!
  permalink: String!
  categories: [String!]!
  blog_categories: [String!]!
  author: String
  description: String!
  image_small: String
  image: String
  content_sidebar: JSON
  time: String
  redirect_from: [String]
  date_published: String!
  updated_at: String!
  body: JSON
  is_blog: Boolean!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input PostFilter {
  published: BooleanFilter
  layout: StringFilter
  title: StringFilter
  permalink: StringFilter
  categories: StringFilter
  blog_categories: StringFilter
  author: StringFilter
  description: StringFilter
  image_small: ImageFilter
  image: ImageFilter
  content_sidebar: RichTextFilter
  time: StringFilter
  redirect_from: StringFilter
  date_published: DatetimeFilter
  updated_at: DatetimeFilter
  body: RichTextFilter
  is_blog: BooleanFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type ServicesSection_1_list {
  title: String
  text: String
}

type ServicesSection_2_list {
  title: String
  text: String
}

type Services implements Node & Document {
  published: Boolean!
  layout: String!
  title: String!
  service_index_description: String!
  subtitle: String
  description: String!
  hero_cta_label: String
  slug: String
  redirect_from: [String]
  section_1_title: String
  section_1_list: [ServicesSection_1_list]
  section_2_title: String
  section_2_list: [ServicesSection_2_list]
  cta_title: String
  cta_description: JSON
  cta_button_label: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ServicesSection_1_listFilter {
  title: StringFilter
  text: StringFilter
}

input ServicesSection_2_listFilter {
  title: StringFilter
  text: StringFilter
}

input ServicesFilter {
  published: BooleanFilter
  layout: StringFilter
  title: StringFilter
  service_index_description: StringFilter
  subtitle: StringFilter
  description: StringFilter
  hero_cta_label: StringFilter
  slug: StringFilter
  redirect_from: StringFilter
  section_1_title: StringFilter
  section_1_list: ServicesSection_1_listFilter
  section_2_title: StringFilter
  section_2_list: ServicesSection_2_listFilter
  cta_title: StringFilter
  cta_description: RichTextFilter
  cta_button_label: StringFilter
}

type ServicesConnectionEdges {
  cursor: String!
  node: Services
}

type ServicesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ServicesConnectionEdges]
}

type Technology implements Node & Document {
  published: Boolean!
  layout: String!
  category: String!
  type: String!
  title: String!
  subtitle: String!
  description: String!
  hero_cta_label: String
  listing_description: String
  slug: String
  image: String
  image_hero: String
  redirect_from: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input TechnologyFilter {
  published: BooleanFilter
  layout: StringFilter
  category: StringFilter
  type: StringFilter
  title: StringFilter
  subtitle: StringFilter
  description: StringFilter
  hero_cta_label: StringFilter
  listing_description: StringFilter
  slug: StringFilter
  image: ImageFilter
  image_hero: ImageFilter
  redirect_from: StringFilter
  body: RichTextFilter
}

type TechnologyConnectionEdges {
  cursor: String!
  node: Technology
}

type TechnologyConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TechnologyConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateJobs(relativePath: String!, params: JobsMutation!): Jobs!
  createJobs(relativePath: String!, params: JobsMutation!): Jobs!
  updatePortfolio(relativePath: String!, params: PortfolioMutation!): Portfolio!
  createPortfolio(relativePath: String!, params: PortfolioMutation!): Portfolio!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateServices(relativePath: String!, params: ServicesMutation!): Services!
  createServices(relativePath: String!, params: ServicesMutation!): Services!
  updateTechnology(relativePath: String!, params: TechnologyMutation!): Technology!
  createTechnology(relativePath: String!, params: TechnologyMutation!): Technology!
}

input DocumentUpdateMutation {
  jobs: JobsMutation
  portfolio: PortfolioMutation
  post: PostMutation
  services: ServicesMutation
  technology: TechnologyMutation
  relativePath: String
}

input DocumentMutation {
  jobs: JobsMutation
  portfolio: PortfolioMutation
  post: PostMutation
  services: ServicesMutation
  technology: TechnologyMutation
}

input JobsMutation {
  published: Boolean
  layout: String
  slug: String
  title: String
  description: String
  image_small: String
  image: String
  redirect_from: [String]
  body: JSON
}

input PortfolioMutation {
  published: Boolean
  layout: String
  theme: String
  slug: String
  title: String
  description: String
  project_url: String
  client: String
  project_date: String
  team_size: String
  lines_of_code: String
  technology_tags: [String]
  industry_vertical_tags: [String]
  service_tags: [String]
  body: JSON
}

input PostMutation {
  published: Boolean
  layout: String
  title: String
  permalink: String
  categories: [String]
  blog_categories: [String]
  author: String
  description: String
  image_small: String
  image: String
  content_sidebar: JSON
  time: String
  redirect_from: [String]
  date_published: String
  updated_at: String
  body: JSON
  is_blog: Boolean
}

input ServicesSection_1_listMutation {
  title: String
  text: String
}

input ServicesSection_2_listMutation {
  title: String
  text: String
}

input ServicesMutation {
  published: Boolean
  layout: String
  title: String
  service_index_description: String
  subtitle: String
  description: String
  hero_cta_label: String
  slug: String
  redirect_from: [String]
  section_1_title: String
  section_1_list: [ServicesSection_1_listMutation]
  section_2_title: String
  section_2_list: [ServicesSection_2_listMutation]
  cta_title: String
  cta_description: JSON
  cta_button_label: String
}

input TechnologyMutation {
  published: Boolean
  layout: String
  category: String
  type: String
  title: String
  subtitle: String
  description: String
  hero_cta_label: String
  listing_description: String
  slug: String
  image: String
  image_hero: String
  redirect_from: [String]
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
