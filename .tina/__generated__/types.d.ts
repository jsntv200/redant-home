//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  jobs: Jobs;
  jobsConnection: JobsConnection;
  portfolio: Portfolio;
  portfolioConnection: PortfolioConnection;
  post: Post;
  postConnection: PostConnection;
  services: Services;
  servicesConnection: ServicesConnection;
  technology: Technology;
  technologyConnection: TechnologyConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryJobsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryJobsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<JobsFilter>;
};


export type QueryPortfolioArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPortfolioConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PortfolioFilter>;
};


export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
};


export type QueryServicesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryServicesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ServicesFilter>;
};


export type QueryTechnologyArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTechnologyConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<TechnologyFilter>;
};

export type DocumentFilter = {
  jobs?: InputMaybe<JobsFilter>;
  portfolio?: InputMaybe<PortfolioFilter>;
  post?: InputMaybe<PostFilter>;
  services?: InputMaybe<ServicesFilter>;
  technology?: InputMaybe<TechnologyFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Jobs | Portfolio | Post | Services | Technology | Folder;

export type Jobs = Node & Document & {
  __typename?: 'Jobs';
  published: Scalars['Boolean']['output'];
  layout: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  image_small?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  redirect_from?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobsFilter = {
  published?: InputMaybe<BooleanFilter>;
  layout?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  image_small?: InputMaybe<ImageFilter>;
  image?: InputMaybe<ImageFilter>;
  redirect_from?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type JobsConnectionEdges = {
  __typename?: 'JobsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Jobs>;
};

export type JobsConnection = Connection & {
  __typename?: 'JobsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<JobsConnectionEdges>>>;
};

export type Portfolio = Node & Document & {
  __typename?: 'Portfolio';
  published: Scalars['Boolean']['output'];
  layout: Scalars['String']['output'];
  theme: Scalars['String']['output'];
  slug?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  project_url?: Maybe<Scalars['String']['output']>;
  client?: Maybe<Scalars['String']['output']>;
  project_date?: Maybe<Scalars['String']['output']>;
  team_size?: Maybe<Scalars['String']['output']>;
  lines_of_code?: Maybe<Scalars['String']['output']>;
  technology_tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  industry_vertical_tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  service_tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PortfolioFilter = {
  published?: InputMaybe<BooleanFilter>;
  layout?: InputMaybe<StringFilter>;
  theme?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  project_url?: InputMaybe<StringFilter>;
  client?: InputMaybe<StringFilter>;
  project_date?: InputMaybe<StringFilter>;
  team_size?: InputMaybe<StringFilter>;
  lines_of_code?: InputMaybe<StringFilter>;
  technology_tags?: InputMaybe<StringFilter>;
  industry_vertical_tags?: InputMaybe<StringFilter>;
  service_tags?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PortfolioConnectionEdges = {
  __typename?: 'PortfolioConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Portfolio>;
};

export type PortfolioConnection = Connection & {
  __typename?: 'PortfolioConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PortfolioConnectionEdges>>>;
};

export type Post = Node & Document & {
  __typename?: 'Post';
  published: Scalars['Boolean']['output'];
  layout: Scalars['String']['output'];
  title: Scalars['String']['output'];
  permalink: Scalars['String']['output'];
  categories: Array<Scalars['String']['output']>;
  blog_categories: Array<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  description: Scalars['String']['output'];
  image_small?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  content_sidebar?: Maybe<Scalars['JSON']['output']>;
  time?: Maybe<Scalars['String']['output']>;
  redirect_from?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  date_published: Scalars['String']['output'];
  updated_at: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  is_blog: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type PostFilter = {
  published?: InputMaybe<BooleanFilter>;
  layout?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  permalink?: InputMaybe<StringFilter>;
  categories?: InputMaybe<StringFilter>;
  blog_categories?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  image_small?: InputMaybe<ImageFilter>;
  image?: InputMaybe<ImageFilter>;
  content_sidebar?: InputMaybe<RichTextFilter>;
  time?: InputMaybe<StringFilter>;
  redirect_from?: InputMaybe<StringFilter>;
  date_published?: InputMaybe<DatetimeFilter>;
  updated_at?: InputMaybe<DatetimeFilter>;
  body?: InputMaybe<RichTextFilter>;
  is_blog?: InputMaybe<BooleanFilter>;
};

export type PostConnectionEdges = {
  __typename?: 'PostConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Post>;
};

export type PostConnection = Connection & {
  __typename?: 'PostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>;
};

export type ServicesSection_1_List = {
  __typename?: 'ServicesSection_1_list';
  title?: Maybe<Scalars['String']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

export type ServicesSection_2_List = {
  __typename?: 'ServicesSection_2_list';
  title?: Maybe<Scalars['String']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

export type Services = Node & Document & {
  __typename?: 'Services';
  published: Scalars['Boolean']['output'];
  layout: Scalars['String']['output'];
  title: Scalars['String']['output'];
  service_index_description: Scalars['String']['output'];
  subtitle?: Maybe<Scalars['String']['output']>;
  description: Scalars['String']['output'];
  slug?: Maybe<Scalars['String']['output']>;
  redirect_from?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  section_1_title?: Maybe<Scalars['String']['output']>;
  section_1_list?: Maybe<Array<Maybe<ServicesSection_1_List>>>;
  section_2_title?: Maybe<Scalars['String']['output']>;
  section_2_list?: Maybe<Array<Maybe<ServicesSection_2_List>>>;
  cta_title?: Maybe<Scalars['String']['output']>;
  cta_description?: Maybe<Scalars['JSON']['output']>;
  cta_button_label?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ServicesSection_1_ListFilter = {
  title?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
};

export type ServicesSection_2_ListFilter = {
  title?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
};

export type ServicesFilter = {
  published?: InputMaybe<BooleanFilter>;
  layout?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  service_index_description?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  redirect_from?: InputMaybe<StringFilter>;
  section_1_title?: InputMaybe<StringFilter>;
  section_1_list?: InputMaybe<ServicesSection_1_ListFilter>;
  section_2_title?: InputMaybe<StringFilter>;
  section_2_list?: InputMaybe<ServicesSection_2_ListFilter>;
  cta_title?: InputMaybe<StringFilter>;
  cta_description?: InputMaybe<RichTextFilter>;
  cta_button_label?: InputMaybe<StringFilter>;
};

export type ServicesConnectionEdges = {
  __typename?: 'ServicesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Services>;
};

export type ServicesConnection = Connection & {
  __typename?: 'ServicesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ServicesConnectionEdges>>>;
};

export type Technology = Node & Document & {
  __typename?: 'Technology';
  published: Scalars['Boolean']['output'];
  layout: Scalars['String']['output'];
  category: Scalars['String']['output'];
  type: Scalars['String']['output'];
  title: Scalars['String']['output'];
  subtitle: Scalars['String']['output'];
  description: Scalars['String']['output'];
  listing_description?: Maybe<Scalars['String']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  image_hero?: Maybe<Scalars['String']['output']>;
  redirect_from?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type TechnologyFilter = {
  published?: InputMaybe<BooleanFilter>;
  layout?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  listing_description?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  image_hero?: InputMaybe<ImageFilter>;
  redirect_from?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type TechnologyConnectionEdges = {
  __typename?: 'TechnologyConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Technology>;
};

export type TechnologyConnection = Connection & {
  __typename?: 'TechnologyConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<TechnologyConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateJobs: Jobs;
  createJobs: Jobs;
  updatePortfolio: Portfolio;
  createPortfolio: Portfolio;
  updatePost: Post;
  createPost: Post;
  updateServices: Services;
  createServices: Services;
  updateTechnology: Technology;
  createTechnology: Technology;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationUpdateJobsArgs = {
  relativePath: Scalars['String']['input'];
  params: JobsMutation;
};


export type MutationCreateJobsArgs = {
  relativePath: Scalars['String']['input'];
  params: JobsMutation;
};


export type MutationUpdatePortfolioArgs = {
  relativePath: Scalars['String']['input'];
  params: PortfolioMutation;
};


export type MutationCreatePortfolioArgs = {
  relativePath: Scalars['String']['input'];
  params: PortfolioMutation;
};


export type MutationUpdatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationCreatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationUpdateServicesArgs = {
  relativePath: Scalars['String']['input'];
  params: ServicesMutation;
};


export type MutationCreateServicesArgs = {
  relativePath: Scalars['String']['input'];
  params: ServicesMutation;
};


export type MutationUpdateTechnologyArgs = {
  relativePath: Scalars['String']['input'];
  params: TechnologyMutation;
};


export type MutationCreateTechnologyArgs = {
  relativePath: Scalars['String']['input'];
  params: TechnologyMutation;
};

export type DocumentUpdateMutation = {
  jobs?: InputMaybe<JobsMutation>;
  portfolio?: InputMaybe<PortfolioMutation>;
  post?: InputMaybe<PostMutation>;
  services?: InputMaybe<ServicesMutation>;
  technology?: InputMaybe<TechnologyMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  jobs?: InputMaybe<JobsMutation>;
  portfolio?: InputMaybe<PortfolioMutation>;
  post?: InputMaybe<PostMutation>;
  services?: InputMaybe<ServicesMutation>;
  technology?: InputMaybe<TechnologyMutation>;
};

export type JobsMutation = {
  published?: InputMaybe<Scalars['Boolean']['input']>;
  layout?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  image_small?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  redirect_from?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PortfolioMutation = {
  published?: InputMaybe<Scalars['Boolean']['input']>;
  layout?: InputMaybe<Scalars['String']['input']>;
  theme?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  project_url?: InputMaybe<Scalars['String']['input']>;
  client?: InputMaybe<Scalars['String']['input']>;
  project_date?: InputMaybe<Scalars['String']['input']>;
  team_size?: InputMaybe<Scalars['String']['input']>;
  lines_of_code?: InputMaybe<Scalars['String']['input']>;
  technology_tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  industry_vertical_tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  service_tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PostMutation = {
  published?: InputMaybe<Scalars['Boolean']['input']>;
  layout?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  permalink?: InputMaybe<Scalars['String']['input']>;
  categories?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  blog_categories?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  author?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  image_small?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  content_sidebar?: InputMaybe<Scalars['JSON']['input']>;
  time?: InputMaybe<Scalars['String']['input']>;
  redirect_from?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  date_published?: InputMaybe<Scalars['String']['input']>;
  updated_at?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
  is_blog?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ServicesSection_1_ListMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

export type ServicesSection_2_ListMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

export type ServicesMutation = {
  published?: InputMaybe<Scalars['Boolean']['input']>;
  layout?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  service_index_description?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  redirect_from?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  section_1_title?: InputMaybe<Scalars['String']['input']>;
  section_1_list?: InputMaybe<Array<InputMaybe<ServicesSection_1_ListMutation>>>;
  section_2_title?: InputMaybe<Scalars['String']['input']>;
  section_2_list?: InputMaybe<Array<InputMaybe<ServicesSection_2_ListMutation>>>;
  cta_title?: InputMaybe<Scalars['String']['input']>;
  cta_description?: InputMaybe<Scalars['JSON']['input']>;
  cta_button_label?: InputMaybe<Scalars['String']['input']>;
};

export type TechnologyMutation = {
  published?: InputMaybe<Scalars['Boolean']['input']>;
  layout?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  listing_description?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  image_hero?: InputMaybe<Scalars['String']['input']>;
  redirect_from?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type JobsPartsFragment = { __typename?: 'Jobs', published: boolean, layout: string, slug: string, title: string, description: string, image_small?: string | null, image?: string | null, redirect_from?: Array<string | null> | null, body?: any | null };

export type PortfolioPartsFragment = { __typename?: 'Portfolio', published: boolean, layout: string, theme: string, slug?: string | null, title?: string | null, description?: string | null, project_url?: string | null, client?: string | null, project_date?: string | null, team_size?: string | null, lines_of_code?: string | null, technology_tags?: Array<string | null> | null, industry_vertical_tags?: Array<string | null> | null, service_tags?: Array<string | null> | null, body?: any | null };

export type PostPartsFragment = { __typename?: 'Post', published: boolean, layout: string, title: string, permalink: string, categories: Array<string>, blog_categories: Array<string>, author?: string | null, description: string, image_small?: string | null, image?: string | null, content_sidebar?: any | null, time?: string | null, redirect_from?: Array<string | null> | null, date_published: string, updated_at: string, body?: any | null, is_blog: boolean };

export type ServicesPartsFragment = { __typename?: 'Services', published: boolean, layout: string, title: string, service_index_description: string, subtitle?: string | null, description: string, slug?: string | null, redirect_from?: Array<string | null> | null, section_1_title?: string | null, section_2_title?: string | null, cta_title?: string | null, cta_description?: any | null, cta_button_label?: string | null, section_1_list?: Array<{ __typename: 'ServicesSection_1_list', title?: string | null, text?: string | null } | null> | null, section_2_list?: Array<{ __typename: 'ServicesSection_2_list', title?: string | null, text?: string | null } | null> | null };

export type TechnologyPartsFragment = { __typename?: 'Technology', published: boolean, layout: string, category: string, type: string, title: string, subtitle: string, description: string, listing_description?: string | null, slug?: string | null, image?: string | null, image_hero?: string | null, redirect_from?: Array<string | null> | null, body?: any | null };

export type JobsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type JobsQuery = { __typename?: 'Query', jobs: { __typename?: 'Jobs', id: string, published: boolean, layout: string, slug: string, title: string, description: string, image_small?: string | null, image?: string | null, redirect_from?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type JobsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<JobsFilter>;
}>;


export type JobsConnectionQuery = { __typename?: 'Query', jobsConnection: { __typename?: 'JobsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'JobsConnectionEdges', cursor: string, node?: { __typename?: 'Jobs', id: string, published: boolean, layout: string, slug: string, title: string, description: string, image_small?: string | null, image?: string | null, redirect_from?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type PortfolioQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PortfolioQuery = { __typename?: 'Query', portfolio: { __typename?: 'Portfolio', id: string, published: boolean, layout: string, theme: string, slug?: string | null, title?: string | null, description?: string | null, project_url?: string | null, client?: string | null, project_date?: string | null, team_size?: string | null, lines_of_code?: string | null, technology_tags?: Array<string | null> | null, industry_vertical_tags?: Array<string | null> | null, service_tags?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PortfolioConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PortfolioFilter>;
}>;


export type PortfolioConnectionQuery = { __typename?: 'Query', portfolioConnection: { __typename?: 'PortfolioConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PortfolioConnectionEdges', cursor: string, node?: { __typename?: 'Portfolio', id: string, published: boolean, layout: string, theme: string, slug?: string | null, title?: string | null, description?: string | null, project_url?: string | null, client?: string | null, project_date?: string | null, team_size?: string | null, lines_of_code?: string | null, technology_tags?: Array<string | null> | null, industry_vertical_tags?: Array<string | null> | null, service_tags?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type PostQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PostQuery = { __typename?: 'Query', post: { __typename?: 'Post', id: string, published: boolean, layout: string, title: string, permalink: string, categories: Array<string>, blog_categories: Array<string>, author?: string | null, description: string, image_small?: string | null, image?: string | null, content_sidebar?: any | null, time?: string | null, redirect_from?: Array<string | null> | null, date_published: string, updated_at: string, body?: any | null, is_blog: boolean, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
}>;


export type PostConnectionQuery = { __typename?: 'Query', postConnection: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PostConnectionEdges', cursor: string, node?: { __typename?: 'Post', id: string, published: boolean, layout: string, title: string, permalink: string, categories: Array<string>, blog_categories: Array<string>, author?: string | null, description: string, image_small?: string | null, image?: string | null, content_sidebar?: any | null, time?: string | null, redirect_from?: Array<string | null> | null, date_published: string, updated_at: string, body?: any | null, is_blog: boolean, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ServicesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ServicesQuery = { __typename?: 'Query', services: { __typename?: 'Services', id: string, published: boolean, layout: string, title: string, service_index_description: string, subtitle?: string | null, description: string, slug?: string | null, redirect_from?: Array<string | null> | null, section_1_title?: string | null, section_2_title?: string | null, cta_title?: string | null, cta_description?: any | null, cta_button_label?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, section_1_list?: Array<{ __typename: 'ServicesSection_1_list', title?: string | null, text?: string | null } | null> | null, section_2_list?: Array<{ __typename: 'ServicesSection_2_list', title?: string | null, text?: string | null } | null> | null } };

export type ServicesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ServicesFilter>;
}>;


export type ServicesConnectionQuery = { __typename?: 'Query', servicesConnection: { __typename?: 'ServicesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ServicesConnectionEdges', cursor: string, node?: { __typename?: 'Services', id: string, published: boolean, layout: string, title: string, service_index_description: string, subtitle?: string | null, description: string, slug?: string | null, redirect_from?: Array<string | null> | null, section_1_title?: string | null, section_2_title?: string | null, cta_title?: string | null, cta_description?: any | null, cta_button_label?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, section_1_list?: Array<{ __typename: 'ServicesSection_1_list', title?: string | null, text?: string | null } | null> | null, section_2_list?: Array<{ __typename: 'ServicesSection_2_list', title?: string | null, text?: string | null } | null> | null } | null } | null> | null } };

export type TechnologyQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type TechnologyQuery = { __typename?: 'Query', technology: { __typename?: 'Technology', id: string, published: boolean, layout: string, category: string, type: string, title: string, subtitle: string, description: string, listing_description?: string | null, slug?: string | null, image?: string | null, image_hero?: string | null, redirect_from?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type TechnologyConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<TechnologyFilter>;
}>;


export type TechnologyConnectionQuery = { __typename?: 'Query', technologyConnection: { __typename?: 'TechnologyConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'TechnologyConnectionEdges', cursor: string, node?: { __typename?: 'Technology', id: string, published: boolean, layout: string, category: string, type: string, title: string, subtitle: string, description: string, listing_description?: string | null, slug?: string | null, image?: string | null, image_hero?: string | null, redirect_from?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const JobsPartsFragmentDoc = gql`
    fragment JobsParts on Jobs {
  published
  layout
  slug
  title
  description
  image_small
  image
  redirect_from
  body
}
    `;
export const PortfolioPartsFragmentDoc = gql`
    fragment PortfolioParts on Portfolio {
  published
  layout
  theme
  slug
  title
  description
  project_url
  client
  project_date
  team_size
  lines_of_code
  technology_tags
  industry_vertical_tags
  service_tags
  body
}
    `;
export const PostPartsFragmentDoc = gql`
    fragment PostParts on Post {
  published
  layout
  title
  permalink
  categories
  blog_categories
  author
  description
  image_small
  image
  content_sidebar
  time
  redirect_from
  date_published
  updated_at
  body
  is_blog
}
    `;
export const ServicesPartsFragmentDoc = gql`
    fragment ServicesParts on Services {
  published
  layout
  title
  service_index_description
  subtitle
  description
  slug
  redirect_from
  section_1_title
  section_1_list {
    __typename
    title
    text
  }
  section_2_title
  section_2_list {
    __typename
    title
    text
  }
  cta_title
  cta_description
  cta_button_label
}
    `;
export const TechnologyPartsFragmentDoc = gql`
    fragment TechnologyParts on Technology {
  published
  layout
  category
  type
  title
  subtitle
  description
  listing_description
  slug
  image
  image_hero
  redirect_from
  body
}
    `;
export const JobsDocument = gql`
    query jobs($relativePath: String!) {
  jobs(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...JobsParts
  }
}
    ${JobsPartsFragmentDoc}`;
export const JobsConnectionDocument = gql`
    query jobsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: JobsFilter) {
  jobsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...JobsParts
      }
    }
  }
}
    ${JobsPartsFragmentDoc}`;
export const PortfolioDocument = gql`
    query portfolio($relativePath: String!) {
  portfolio(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PortfolioParts
  }
}
    ${PortfolioPartsFragmentDoc}`;
export const PortfolioConnectionDocument = gql`
    query portfolioConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PortfolioFilter) {
  portfolioConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PortfolioParts
      }
    }
  }
}
    ${PortfolioPartsFragmentDoc}`;
export const PostDocument = gql`
    query post($relativePath: String!) {
  post(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostParts
  }
}
    ${PostPartsFragmentDoc}`;
export const PostConnectionDocument = gql`
    query postConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PostFilter) {
  postConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostParts
      }
    }
  }
}
    ${PostPartsFragmentDoc}`;
export const ServicesDocument = gql`
    query services($relativePath: String!) {
  services(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ServicesParts
  }
}
    ${ServicesPartsFragmentDoc}`;
export const ServicesConnectionDocument = gql`
    query servicesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ServicesFilter) {
  servicesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ServicesParts
      }
    }
  }
}
    ${ServicesPartsFragmentDoc}`;
export const TechnologyDocument = gql`
    query technology($relativePath: String!) {
  technology(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...TechnologyParts
  }
}
    ${TechnologyPartsFragmentDoc}`;
export const TechnologyConnectionDocument = gql`
    query technologyConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: TechnologyFilter) {
  technologyConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...TechnologyParts
      }
    }
  }
}
    ${TechnologyPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      jobs(variables: JobsQueryVariables, options?: C): Promise<{data: JobsQuery, variables: JobsQueryVariables, query: string}> {
        return requester<{data: JobsQuery, variables: JobsQueryVariables, query: string}, JobsQueryVariables>(JobsDocument, variables, options);
      },
    jobsConnection(variables?: JobsConnectionQueryVariables, options?: C): Promise<{data: JobsConnectionQuery, variables: JobsConnectionQueryVariables, query: string}> {
        return requester<{data: JobsConnectionQuery, variables: JobsConnectionQueryVariables, query: string}, JobsConnectionQueryVariables>(JobsConnectionDocument, variables, options);
      },
    portfolio(variables: PortfolioQueryVariables, options?: C): Promise<{data: PortfolioQuery, variables: PortfolioQueryVariables, query: string}> {
        return requester<{data: PortfolioQuery, variables: PortfolioQueryVariables, query: string}, PortfolioQueryVariables>(PortfolioDocument, variables, options);
      },
    portfolioConnection(variables?: PortfolioConnectionQueryVariables, options?: C): Promise<{data: PortfolioConnectionQuery, variables: PortfolioConnectionQueryVariables, query: string}> {
        return requester<{data: PortfolioConnectionQuery, variables: PortfolioConnectionQueryVariables, query: string}, PortfolioConnectionQueryVariables>(PortfolioConnectionDocument, variables, options);
      },
    post(variables: PostQueryVariables, options?: C): Promise<{data: PostQuery, variables: PostQueryVariables, query: string}> {
        return requester<{data: PostQuery, variables: PostQueryVariables, query: string}, PostQueryVariables>(PostDocument, variables, options);
      },
    postConnection(variables?: PostConnectionQueryVariables, options?: C): Promise<{data: PostConnectionQuery, variables: PostConnectionQueryVariables, query: string}> {
        return requester<{data: PostConnectionQuery, variables: PostConnectionQueryVariables, query: string}, PostConnectionQueryVariables>(PostConnectionDocument, variables, options);
      },
    services(variables: ServicesQueryVariables, options?: C): Promise<{data: ServicesQuery, variables: ServicesQueryVariables, query: string}> {
        return requester<{data: ServicesQuery, variables: ServicesQueryVariables, query: string}, ServicesQueryVariables>(ServicesDocument, variables, options);
      },
    servicesConnection(variables?: ServicesConnectionQueryVariables, options?: C): Promise<{data: ServicesConnectionQuery, variables: ServicesConnectionQueryVariables, query: string}> {
        return requester<{data: ServicesConnectionQuery, variables: ServicesConnectionQueryVariables, query: string}, ServicesConnectionQueryVariables>(ServicesConnectionDocument, variables, options);
      },
    technology(variables: TechnologyQueryVariables, options?: C): Promise<{data: TechnologyQuery, variables: TechnologyQueryVariables, query: string}> {
        return requester<{data: TechnologyQuery, variables: TechnologyQueryVariables, query: string}, TechnologyQueryVariables>(TechnologyDocument, variables, options);
      },
    technologyConnection(variables?: TechnologyConnectionQueryVariables, options?: C): Promise<{data: TechnologyConnectionQuery, variables: TechnologyConnectionQueryVariables, query: string}> {
        return requester<{data: TechnologyConnectionQuery, variables: TechnologyConnectionQueryVariables, query: string}, TechnologyConnectionQueryVariables>(TechnologyConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
  options?: { branch?: string }
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: { branch?: string },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    })

    return { data: data?.data, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
  options?: {
    branch?: string
  }
) => {
  const requester = generateRequester(client, options)
  return getSdk(requester)
}

  